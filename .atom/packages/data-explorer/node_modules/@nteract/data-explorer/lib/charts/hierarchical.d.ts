/// <reference types="d3-collection" />
/// <reference types="react" />
import * as Dx from "../types";
interface HierarchicalOptions {
    hierarchyType: Dx.HierarchyType;
    chart: Dx.Chart;
    selectedDimensions: Dx.ChartOptions["selectedDimensions"];
    primaryKey: Dx.ChartOptions["primaryKey"];
    colors: Dx.ChartOptions["colors"];
}
export declare const semioticHierarchicalChart: (data: Dx.Datapoint[], schema: Dx.Schema, options: HierarchicalOptions) => {
    edges?: undefined;
    edgeStyle?: undefined;
    nodeStyle?: undefined;
    networkType?: undefined;
    edgeRenderKey?: undefined;
    baseMarkProps?: undefined;
    margin?: undefined;
    hoverAnnotation?: undefined;
    tooltipContent?: undefined;
} | {
    edges: {
        values: {
            key: string;
            values: any;
            value: undefined;
        }[];
    };
    edgeStyle: () => {
        fill: string;
        stroke: string;
    };
    nodeStyle: (node: {
        depth: number;
    }) => {
        fill: string;
        stroke: string;
        strokeOpacity: number;
    };
    networkType: {
        type: "partition" | "dendrogram" | "treemap";
        projection: string | false;
        hierarchySum: (node: {
            [index: string]: number;
        }) => number;
        hierarchyChildren: (node: {
            values: {}[];
        }) => {}[];
        padding: number;
    };
    edgeRenderKey: (edge: object, index: number) => number;
    baseMarkProps: {
        forceUpdate: boolean;
    };
    margin: {
        left: number;
        right: number;
        top: number;
        bottom: number;
    };
    hoverAnnotation: ({
        type: string;
        style?: undefined;
    } | {
        type: string;
        style: {
            stroke: string;
            strokeOpacity: number;
            strokeWidth: number;
            fill: string;
        };
    })[];
    tooltipContent: (hoveredDatapoint: Dx.Datapoint) => JSX.Element;
};
export {};
