"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const octicons_1 = require("@nteract/octicons");
const React = __importStar(require("react"));
const chart_docs_1 = require("../docs/chart-docs");
const icons_1 = require("../icons");
const IconButton_1 = require("./IconButton");
const styled_components_1 = __importDefault(require("styled-components"));
const ToolbarWrapper = styled_components_1.default.div `
  display: flex;
  flex-flow: column nowrap;
  z-index: 1;
  padding: 5px;
`;
Toolbar.defaultProps = {
    componentType: "toolbar",
    currentView: "",
    dimensions: [],
    setGrid: () => null,
    setView: () => null
};
function Toolbar({ dimensions, setGrid, setView, currentView, componentType, largeDataset }) {
    return (React.createElement(ToolbarWrapper, { className: "dx-button-bar" },
        React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.grid, onClick: setGrid, message: "Data Table", selected: false },
            React.createElement(octicons_1.DatabaseOcticon, null)),
        !largeDataset && dimensions.length > 0 && (React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.bar, onClick: () => setView("bar"), selected: currentView === "bar", message: "Bar Graph" },
            React.createElement(icons_1.BarChartIcon, null))),
        React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.summary, onClick: () => setView("summary"), selected: currentView === "summary", message: "Summary" },
            React.createElement(icons_1.BoxplotIcon, null)),
        React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.scatter, onClick: () => setView("scatter"), selected: currentView === "scatter", message: "Scatter Plot" },
            React.createElement(icons_1.ScatterplotIcon, null)),
        React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.hexbin, onClick: () => setView("hexbin"), selected: currentView === "hexbin", message: "Area Plot" },
            React.createElement(icons_1.HexbinIcon, null)),
        !largeDataset && dimensions.length > 1 && (React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.network, onClick: () => setView("network"), selected: currentView === "network", message: "Network" },
            React.createElement(icons_1.NetworkIcon, null))),
        !largeDataset && dimensions.length > 0 && (React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.hierarchy, onClick: () => setView("hierarchy"), selected: currentView === "hierarchy", message: "Hierarchy" },
            React.createElement(icons_1.TreeIcon, null))),
        dimensions.length > 0 && (React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.parallel, onClick: () => setView("parallel"), selected: currentView === "parallel", message: "Parallel Coordinates" },
            React.createElement(icons_1.ParallelCoordinatesIcon, null))),
        React.createElement(IconButton_1.IconButton, { title: chart_docs_1.chartHelpText.line, onClick: () => setView("line"), selected: currentView === "line", message: "Line Graph" },
            React.createElement(icons_1.LineChartIcon, null))));
}
exports.Toolbar = Toolbar;
