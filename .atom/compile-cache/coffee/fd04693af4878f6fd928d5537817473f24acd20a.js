(function() {
  var DEFAULT_INDENT, DEFAULT_WARN_FN, adjust_space;

  DEFAULT_INDENT = '    ';

  adjust_space = function(line) {
    var comment, muli_string, string_list;
    string_list = line.match(/(['"])[^\1]*?\1/g);
    muli_string = line.match(/\[(=*)\[([^\]\1\]]*)/);
    comment = line.match(/\-{2}[^\[].*$/);
    line = line.replace(/\s+/g, ' ');
    line = line.replace(/\s?(==|>=|<=|~=|[=><\+\*\/])\s?/g, ' $1 ');
    line = line.replace(/([^=e\-\(\s])\s?\-\s?([^\-\[])/g, '$1 - $2');
    line = line.replace(/([^\d])e\s?\-\s?([^\-\[])/g, '$1e - $2');
    line = line.replace(/,([^\s])/g, ', $1');
    line = line.replace(/\s+,/g, ',');
    line = line.replace(/(['"])[^\1]*?\1/g, function() {
      return string_list.shift();
    });
    if (muli_string && muli_string[0]) {
      line = line.replace(/\[(=*)\[([^\]\1\]]*)/, muli_string[0]);
    }
    if (comment && comment[0]) {
      line = line.replace(/\-{2}[^\[].*$/, comment[0]);
    }
    return line;
  };

  DEFAULT_WARN_FN = function(msg) {
    return console.log('WARNING:', msg);
  };

  module.exports = function(str, indent, warn_fn, opts) {
    var $currIndent, $extIndent, $lastIndent, $nextIndent, $prevLength, $template, eol, new_code;
    if (opts == null) {
      opts = {};
    }
    eol = (opts != null ? opts.eol : void 0) || '\n';
    indent = indent || DEFAULT_INDENT;
    warn_fn = typeof warn_fn === 'function' ? warn_fn : DEFAULT_WARN_FN;
    if (Number.isInteger(indent)) {
      indent = ' '.repeat(indent);
    }
    $currIndent = 0;
    $nextIndent = 0;
    $prevLength = 0;
    $extIndent = 0;
    $lastIndent = 0;
    $template = 0;
    new_code = str.split(/\r?\n/g).map(function(line, line_number) {
      var $brackets, $curly, $template_flag, $useful, arr, code, comment, new_line, raw_line, res1, res2;
      $template_flag = false;
      if ($template) {
        res2 = line.match(/\](=*)\]/);
        if (res2 && $template === res2[1].length + 1) {
          $template_flag = true;
          if ($template && !/]=*]$/.test(line)) {
            arr = line.split(/\]=*\]/, 2);
            comment = arr[0];
            code = arr[1];
            line = comment + ']' + '='.repeat($template - 1) + ']' + adjust_space(code);
            $template = 0;
          }
          $template = 0;
        } else {
          return line;
        }
      }
      res1 = line.match(/\[(=*)\[/);
      if (res1 && (!new RegExp("\\]" + ('='.repeat(res1[1].length)) + "\\]").test(line))) {
        $template = res1[1].length + 1;
      }
      if (!$template_flag) {
        line = line.trim();
        line = adjust_space(line);
      }
      if (!line.length) {
        return '';
      }
      raw_line = line;
      line = line.replace(/(['"])[^\1]*?\1/g, '');
      line = line.replace(/\s*--.+$/, '');
      if (/^((local )?function|repeat|while)\b/.test(line) && !/\bend\s*[\),;]*$/.test(line) || /\b(then|do)$/.test(line) && !/^elseif\b/.test(line) || /^if\b/.test(line) && /\bthen\b/.test(line) && !/\bend$/.test(line) || /\bfunction ?(?:\w+ )?\([^\)]*\)$/.test(line) && !/\bend$/.test(line)) {
        $nextIndent = $currIndent + 1;
      } else if (/^until\b/.test(line) || /^end\s*[\),;]*$/.test(line) || /^end\s*\)\s*\.\./.test(line) || /^else(if)?\b/.test(line) && /\bend$/.test(line)) {
        $nextIndent = --$currIndent;
      } else if (/^else\b/.test(line) || /^elseif\b/.test(line)) {
        $nextIndent = $currIndent;
        $currIndent = $currIndent - 1;
      }
      $brackets = (line.match(/\(/g) || []).length - (line.match(/\)/g) || []).length;
      $curly = (line.match(/\{/g) || []).length - (line.match(/\}/g) || []).length;
      if ($curly < 0) {
        $currIndent += $curly;
      }
      if ($brackets < 0) {
        $currIndent += $brackets;
      }
      $nextIndent += $brackets + $curly;
      if ($currIndent - $lastIndent > 1) {
        $extIndent += $nextIndent - $lastIndent - 1;
        $nextIndent = $currIndent = 1 + $lastIndent;
      }
      if ($currIndent - $lastIndent < -1 && $extIndent > 0) {
        $extIndent += $currIndent - $lastIndent + 1;
        $currIndent = -1 + $lastIndent;
      }
      if ($nextIndent < $currIndent) {
        $nextIndent = $currIndent;
      }
      if ($currIndent < 0) {
        warn_fn("negative indentation at line " + line_number + ": " + raw_line);
      }
      new_line = (raw_line.length && $currIndent > 0 && !$template_flag ? indent.repeat($currIndent) : '') + raw_line;
      $useful = $prevLength > 0 || raw_line.length > 0;
      $lastIndent = $currIndent;
      $currIndent = $nextIndent;
      $prevLength = raw_line.length;
      return new_line || void 0;
    });
    if ($currIndent > 0) {
      warn_fn('positive indentation at the end');
    }
    return new_code.join(eol);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
