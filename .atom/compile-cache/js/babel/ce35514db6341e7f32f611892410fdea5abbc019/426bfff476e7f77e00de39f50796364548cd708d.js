Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ipynbOpener = ipynbOpener;
exports.importNotebook = importNotebook;

var _loadNotebook = _asyncToGenerator(function* (filename) {
  var data = undefined;
  var nb = undefined;
  try {
    data = yield readFileP(filename);
    nb = (0, _nteractCommutable.parseNotebook)(data);
  } catch (err) {
    if (err.name === "SyntaxError") {
      atom.notifications.addError("Error not a valid notebook", {
        detail: err.stack
      });
    } else {
      atom.notifications.addError("Error reading file", {
        detail: err.message
      });
    }
    return;
  }
  if (nb.nbformat < 4) {
    atom.notifications.addError("Only notebook version 4 currently supported");
    return;
  }
  var editor = yield atom.workspace.open();
  var grammar = getGrammarForNotebook(nb);
  if (!grammar) return;
  editor.setGrammar(grammar);
  var commentStartString = (0, _codeManager.getCommentStartString)(editor);
  if (!commentStartString) {
    atom.notifications.addError("No comment symbol defined in root scope");
    return;
  }
  var sources = _lodash2["default"].map(nb.cells, function (cell) {
    return getCellSource(cell, commentStartString + " ");
  });
  editor.setText(sources.join(linesep));
});

exports._loadNotebook = _loadNotebook;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, "next"); var callThrow = step.bind(null, "throw"); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require("path");

var path = _interopRequireWildcard(_path);

var _fs = require("fs");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _util = require("util");

var _nteractCommutable = require("@nteract/commutable");

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _codeManager = require("./code-manager");

var dialog = require("electron").remote.dialog;

var readFileP = (0, _util.promisify)(_fs.readFile);
var linesep = process.platform === "win32" ? "\r\n" : "\n";

function ipynbOpener(uri) {
  if (path.extname(uri).toLowerCase() === ".ipynb" && atom.config.get("Hydrogen.importNotebookURI") === true) {
    return _loadNotebook(uri);
  }
}

function importNotebook(event) {
  // Use selected filepath if called from tree-view context menu
  var filenameFromTreeView = _lodash2["default"].get(event, "target.dataset.path");
  if (filenameFromTreeView && path.extname(filenameFromTreeView) === ".ipynb") {
    return _loadNotebook(filenameFromTreeView);
  }

  dialog.showOpenDialog({
    properties: ["openFile"],
    filters: [{ name: "Notebooks", extensions: ["ipynb"] }]
  }, function (filenames) {
    if (!filenames) {
      atom.notifications.addError("No filenames selected");
      return;
    }
    var filename = filenames[0];
    if (path.extname(filename) !== ".ipynb") {
      atom.notifications.addError("Selected file must have extension .ipynb");
      return;
    }

    _loadNotebook(filename);
  });
}

function getGrammarForNotebook(nb) {
  if (!nb.metadata.kernelspec || !nb.metadata.language_info) {
    atom.notifications.addWarning("No language metadata in notebook; assuming Python");
    return atom.grammars.grammarForScopeName("source.python");
  }

  var matchedGrammar = null;
  // metadata.language_info.file_extension is not a required metadata field, but
  // if it exists is the best way to match with Atom Grammar
  if (nb.metadata.language_info && nb.metadata.language_info.file_extension) {
    matchedGrammar = getGrammarForFileExtension(nb.metadata.language_info.file_extension);
    if (matchedGrammar) return matchedGrammar;
  }

  // If metadata exists, then metadata.kernelspec.name is required (in v4)
  if (nb.metadata.kernelspec.name) {
    matchedGrammar = getGrammarForKernelspecName(nb.metadata.kernelspec.name);
    if (matchedGrammar) return matchedGrammar;
  }

  atom.notifications.addWarning("Unable to determine correct language grammar");
  return atom.grammars.grammarForScopeName("source.python");
}

function getGrammarForFileExtension(ext) {
  ext = ext.startsWith(".") ? ext.slice(1) : ext;
  var grammars = atom.grammars.getGrammars();
  return _lodash2["default"].find(grammars, function (grammar) {
    return _lodash2["default"].includes(grammar.fileTypes, ext);
  });
}

function getGrammarForKernelspecName(name) {
  // Check if there exists an Atom grammar named source.${name}
  var grammars = atom.grammars.getGrammars();
  var matchedGrammar = _lodash2["default"].find(grammars, { scopeName: "source." + name });
  if (matchedGrammar) return matchedGrammar;

  // Otherwise attempt manual matching from kernelspec name to Atom scope
  var crosswalk = {
    python2: "source.python",
    python3: "source.python",
    bash: "source.shell",
    javascript: "source.js",
    ir: "source.r"
  };
  if (crosswalk[name]) {
    return atom.grammars.grammarForScopeName(crosswalk[name]);
  }
}

function getCellSource(cell, commentStartString) {
  var cellType = cell.cell_type;
  var cellMarkerKeyword = cellType === "markdown" ? "markdown" : null;
  var cellMarker = getCellMarker(commentStartString, cellMarkerKeyword);
  var source = cell.source;
  if (cellType === "markdown") {
    source = _lodash2["default"].map(source, function (line) {
      return commentStartString + line;
    });
  }
  return cellMarker + linesep + source.join("");
}

function getCellMarker(commentStartString, keyword) {
  var marker = commentStartString + "%%";
  return keyword ? marker + (" " + keyword) : marker;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,