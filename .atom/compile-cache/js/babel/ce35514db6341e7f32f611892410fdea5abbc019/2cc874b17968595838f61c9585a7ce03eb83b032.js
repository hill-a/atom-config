Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeString = normalizeString;
exports.getRow = getRow;
exports.getTextInRange = getTextInRange;
exports.getRows = getRows;
exports.getMetadataForRow = getMetadataForRow;
exports.removeCommentsMarkdownCell = removeCommentsMarkdownCell;
exports.getSelectedText = getSelectedText;
exports.isComment = isComment;
exports.isBlank = isBlank;
exports.escapeBlankRows = escapeBlankRows;
exports.getFoldRange = getFoldRange;
exports.getFoldContents = getFoldContents;
exports.getCodeToInspect = getCodeToInspect;
exports.getCommentStartString = getCommentStartString;
exports.getRegexString = getRegexString;
exports.getBreakpoints = getBreakpoints;
exports.getCurrentCell = getCurrentCell;
exports.getCells = getCells;
exports.getCellsForBreakPoints = getCellsForBreakPoints;
exports.moveDown = moveDown;
exports.findPrecedingBlock = findPrecedingBlock;
exports.findCodeBlock = findCodeBlock;
exports.foldCurrentCell = foldCurrentCell;
exports.foldAllButCurrentCell = foldAllButCurrentCell;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _atom = require("atom");

var _escapeStringRegexp = require("escape-string-regexp");

var _escapeStringRegexp2 = _interopRequireDefault(_escapeStringRegexp);

var _stripIndent = require("strip-indent");

var _stripIndent2 = _interopRequireDefault(_stripIndent);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require("./utils");

function normalizeString(code) {
  if (code) {
    return code.replace(/\r\n|\r/g, "\n");
  }
  return null;
}

function getRow(editor, row) {
  return normalizeString(editor.lineTextForBufferRow(row));
}

function getTextInRange(editor, start, end) {
  var code = editor.getTextInBufferRange([start, end]);
  return normalizeString(code);
}

function getRows(editor, startRow, endRow) {
  var code = editor.getTextInBufferRange({
    start: {
      row: startRow,
      column: 0
    },
    end: {
      row: endRow,
      column: 9999999
    }
  });
  return normalizeString(code);
}

function getMetadataForRow(editor, anyPointInCell) {
  if ((0, _utils.isMultilanguageGrammar)(editor.getGrammar())) {
    return "codecell";
  }
  var cellType = "codecell";
  var buffer = editor.getBuffer();
  anyPointInCell = new _atom.Point(anyPointInCell.row, buffer.lineLengthForRow(anyPointInCell.row));
  var regexString = getRegexString(editor);
  if (regexString) {
    var regex = new RegExp(regexString);
    buffer.backwardsScanInRange(regex, new _atom.Range(new _atom.Point(0, 0), anyPointInCell), function (_ref) {
      var match = _ref.match;

      for (var i = 1; i < match.length; i++) {
        if (match[i]) {
          switch (match[i]) {
            case "md":
            case "markdown":
              cellType = "markdown";
              break;
            case "codecell":
            default:
              cellType = "codecell";
              break;
          }
        }
      }
    });
  }
  return cellType;
}

function removeCommentsMarkdownCell(editor, text) {
  var commentStartString = getCommentStartString(editor);
  if (!commentStartString) return text;

  var lines = text.split("\n");
  var editedLines = [];
  _lodash2["default"].forEach(lines, function (line) {
    if (line.startsWith(commentStartString)) {
      // Remove comment from start of line
      editedLines.push(line.slice(commentStartString.length));
    } else {
      editedLines.push(line);
    }
  });
  return (0, _stripIndent2["default"])(editedLines.join("\n"));
}

function getSelectedText(editor) {
  return normalizeString(editor.getSelectedText());
}

function isComment(editor, position) {
  var scope = editor.scopeDescriptorForBufferPosition(position);
  var scopeString = scope.getScopeChain();
  return _lodash2["default"].includes(scopeString, "comment.line");
}

function isBlank(editor, row) {
  return editor.getBuffer().isRowBlank(row);
}

function escapeBlankRows(editor, startRow, endRow) {
  while (endRow > startRow) {
    if (!isBlank(editor, endRow)) break;
    endRow -= 1;
  }
  return endRow;
}

function getFoldRange(editor, row) {
  var range = (0, _utils.rowRangeForCodeFoldAtBufferRow)(editor, row);
  if (!range) return;
  if (range[1] < editor.getLastBufferRow() && getRow(editor, range[1] + 1) === "end") {
    range[1] += 1;
  }
  (0, _utils.log)("getFoldRange:", range);
  return range;
}

function getFoldContents(editor, row) {
  var range = getFoldRange(editor, row);
  if (!range) return;
  return { code: getRows(editor, range[0], range[1]), row: range[1] };
}

function getCodeToInspect(editor) {
  var selectedText = getSelectedText(editor);
  var code = undefined;
  var cursorPosition = undefined;
  if (selectedText) {
    code = selectedText;
    cursorPosition = code.length;
  } else {
    var cursor = editor.getLastCursor();
    var row = cursor.getBufferRow();
    code = getRow(editor, row);
    cursorPosition = cursor.getBufferColumn();

    // TODO: use kernel.complete to find a selection
    var identifierEnd = code ? code.slice(cursorPosition).search(/\W/) : -1;
    if (identifierEnd !== -1) {
      cursorPosition += identifierEnd;
    }
  }
  cursorPosition = (0, _utils.js_idx_to_char_idx)(cursorPosition, code);
  return [code, cursorPosition];
}

function getCommentStartString(editor) {
  var _editor$tokenizedBuffer$commentStringsForPosition =
  // $FlowFixMe: This is an unofficial API
  editor.tokenizedBuffer.commentStringsForPosition(editor.getCursorBufferPosition());

  var commentStartString = _editor$tokenizedBuffer$commentStringsForPosition.commentStartString;

  if (!commentStartString) {
    (0, _utils.log)("CellManager: No comment string defined in root scope");
    return null;
  }
  return commentStartString.trimRight();
}

function getRegexString(editor) {
  var commentStartString = getCommentStartString(editor);
  if (!commentStartString) return null;

  var escapedCommentStartString = (0, _escapeStringRegexp2["default"])(commentStartString);

  var regexString = escapedCommentStartString + " *%% *(md|markdown)?| *<(codecell|md|markdown)>| *(In[[0-9 ]*])";

  return regexString;
}

function getBreakpoints(editor) {
  var buffer = editor.getBuffer();
  var breakpoints = [];

  var regexString = getRegexString(editor);
  if (regexString) {
    var regex = new RegExp(regexString, "g");
    buffer.scan(regex, function (_ref2) {
      var range = _ref2.range;

      if (isComment(editor, range.start)) {
        breakpoints.push(range.start);
      }
    });
  }

  breakpoints.push(buffer.getEndPosition());

  (0, _utils.log)("CellManager: Breakpoints:", breakpoints);

  return breakpoints;
}

function getCell(editor, anyPointInCell) {
  if (!anyPointInCell) {
    anyPointInCell = editor.getCursorBufferPosition();
  }
  var buffer = editor.getBuffer();
  anyPointInCell = new _atom.Point(anyPointInCell.row, buffer.lineLengthForRow(anyPointInCell.row));
  var start = new _atom.Point(0, 0);
  var end = buffer.getEndPosition();
  var regexString = getRegexString(editor);

  if (!regexString) {
    return new _atom.Range(start, end);
  }

  var regex = new RegExp(regexString);

  if (anyPointInCell.row >= 0) {
    buffer.backwardsScanInRange(regex, new _atom.Range(start, anyPointInCell), function (_ref3) {
      var range = _ref3.range;

      start = new _atom.Point(range.start.row + 1, 0);
    });
  }

  buffer.scanInRange(regex, new _atom.Range(anyPointInCell, end), function (_ref4) {
    var range = _ref4.range;

    end = range.start;
  });

  (0, _utils.log)("CellManager: Cell [start, end]:", [start, end], "anyPointInCell:", anyPointInCell);

  return new _atom.Range(start, end);
}

function isEmbeddedCode(editor, referenceScope, row) {
  var scopes = editor.scopeDescriptorForBufferPosition(new _atom.Point(row, 0)).getScopesArray();
  return _lodash2["default"].includes(scopes, referenceScope);
}

function getCurrentFencedCodeBlock(editor) {
  var buffer = editor.getBuffer();

  var _buffer$getEndPosition = buffer.getEndPosition();

  var bufferEndRow = _buffer$getEndPosition.row;

  var cursor = editor.getCursorBufferPosition();
  var start = cursor.row;
  var end = cursor.row;
  var scope = (0, _utils.getEmbeddedScope)(editor, cursor);
  if (!scope) return getCell(editor);
  while (start > 0 && isEmbeddedCode(editor, scope, start - 1)) {
    start -= 1;
  }

  while (end < bufferEndRow && isEmbeddedCode(editor, scope, end + 1)) {
    end += 1;
  }
  return new _atom.Range([start, 0], [end + 1, 0]);
}

function getCurrentCell(editor) {
  if ((0, _utils.isMultilanguageGrammar)(editor.getGrammar())) {
    return getCurrentFencedCodeBlock(editor);
  }
  return getCell(editor);
}

function getCells(editor) {
  var breakpoints = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

  if (breakpoints.length !== 0) {
    breakpoints.sort(function (a, b) {
      return a.compare(b);
    });
  } else {
    breakpoints = getBreakpoints(editor);
  }
  return getCellsForBreakPoints(editor, breakpoints);
}

function getCellsForBreakPoints(editor, breakpoints) {
  var start = new _atom.Point(0, 0);
  // Let start be earliest row with text
  editor.scan(/\S/, function (match) {
    start = new _atom.Point(match.range.start.row, 0);
    match.stop();
  });
  return _lodash2["default"].compact(_lodash2["default"].map(breakpoints, function (end) {
    var cell = end.isEqual(start) ? null : new _atom.Range(start, end);
    start = new _atom.Point(end.row + 1, 0);
    return cell;
  }));
}

function moveDown(editor, row) {
  var lastRow = editor.getLastBufferRow();

  if (row >= lastRow) {
    editor.moveToBottom();
    editor.insertNewline();
    return;
  }

  while (row < lastRow) {
    row += 1;
    if (!isBlank(editor, row)) break;
  }

  editor.setCursorBufferPosition({
    row: row,
    column: 0
  });
}

function findPrecedingBlock(editor, row, indentLevel) {
  var previousRow = row - 1;
  while (previousRow >= 0) {
    var previousIndentLevel = editor.indentationForBufferRow(previousRow);
    var sameIndent = previousIndentLevel <= indentLevel;
    var blank = isBlank(editor, previousRow);
    var isEnd = getRow(editor, previousRow) === "end";

    if (isBlank(editor, row)) {
      row = previousRow;
    }
    if (sameIndent && !blank && !isEnd) {
      var cell = getCell(editor, new _atom.Point(row, 0));
      if (cell.start.row > row) {
        return { code: "", row: row };
      }
      return { code: getRows(editor, previousRow, row), row: row };
    }
    previousRow -= 1;
  }
  return null;
}

function findCodeBlock(editor) {
  var selectedText = getSelectedText(editor);

  if (selectedText) {
    var selectedRange = editor.getSelectedBufferRange();
    var _cell = getCell(editor, selectedRange.end);
    var startPoint = _cell.start.isGreaterThan(selectedRange.start) ? _cell.start : selectedRange.start;
    var endRow = selectedRange.end.row;
    if (selectedRange.end.column === 0) {
      endRow -= 1;
    }
    endRow = escapeBlankRows(editor, startPoint.row, endRow);
    if (startPoint.isGreaterThanOrEqual(selectedRange.end)) {
      return { code: "", row: endRow };
    }
    return {
      code: getTextInRange(editor, startPoint, selectedRange.end),
      row: endRow
    };
  }

  var cursor = editor.getLastCursor();

  var row = cursor.getBufferRow();
  (0, _utils.log)("findCodeBlock:", row);

  var indentLevel = cursor.getIndentLevel();
  var foldable = editor.isFoldableAtBufferRow(row);
  var foldRange = (0, _utils.rowRangeForCodeFoldAtBufferRow)(editor, row);
  if (!foldRange || foldRange[0] == null || foldRange[1] == null) {
    foldable = false;
  }

  if (foldable) {
    return getFoldContents(editor, row);
  }
  if (isBlank(editor, row) || getRow(editor, row) === "end") {
    return findPrecedingBlock(editor, row, indentLevel);
  }
  var cell = getCell(editor, new _atom.Point(row, 0));
  if (cell.start.row > row) {
    return { code: "", row: row };
  }
  return { code: getRow(editor, row), row: row };
}

function foldCurrentCell(editor) {
  var cellRange = getCurrentCell(editor);
  var newRange = adjustCellFoldRange(editor, cellRange);
  editor.setSelectedBufferRange(newRange);
  editor.getSelections()[0].fold();
}

function foldAllButCurrentCell(editor) {
  var initialSelections = editor.getSelectedBufferRanges();

  // I take .slice(1) because there's always an empty cell range from [0,0] to
  // [0,0]
  var allCellRanges = getCells(editor).slice(1);
  var currentCellRange = getCurrentCell(editor);
  var newRanges = allCellRanges.filter(function (cellRange) {
    return !cellRange.isEqual(currentCellRange);
  }).map(function (cellRange) {
    return adjustCellFoldRange(editor, cellRange);
  });

  editor.setSelectedBufferRanges(newRanges);
  editor.getSelections().forEach(function (selection) {
    return selection.fold();
  });

  // Restore selections
  editor.setSelectedBufferRanges(initialSelections);
}

function adjustCellFoldRange(editor, range) {
  var startRow = range.start.row > 0 ? range.start.row - 1 : 0;
  var startWidth = editor.lineTextForBufferRow(startRow).length;
  var endRow = range.end.row == editor.getLastBufferRow() ? range.end.row : range.end.row - 1;
  var endWidth = editor.lineTextForBufferRow(endRow).length;

  return new _atom.Range(new _atom.Point(startRow, startWidth), new _atom.Point(endRow, endWidth));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,