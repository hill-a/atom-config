"use babel";

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;
exports.handleURI = handleURI;
exports.deserialize = deserialize;
var path = null;
var PdfEditorView = null;
var querystring = null;
var subscriptions = null;

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

function activate(state) {
  subscriptions = new CompositeDisposable(atom.workspace.addOpener(openUri), atom.packages.onDidActivateInitialPackages(createPdfStatusView), atom.config.observe('pdf-view.fileExtensions', updateFileExtensions), atom.commands.add('atom-workspace', 'pdf-view:toggle-binary-view', toggleBinaryView));
}

function deactivate() {
  if (subscriptions) {
    subscriptions.dispose();
  }
}

function handleURI(parsedUri) {
  var query = Object.assign({}, parsedUri.query);

  if (parsedUri.hash) {
    // Allow query parameters to exist in hash to main compatability with Adobe
    // PDF style urls.
    if (parsedUri.hash.includes('=')) {
      if (querystring === null) {
        querystring = require('querystring');
      }

      Object.assign(query, querystring.parse(parsedUri.hash.substring(1)));
    } else {
      query.nameddest = parsedUri.hash.substring(1);
    }
  }

  var filePath = query.path || pathnameToFilePath(parsedUri.pathname);

  atom.workspace.open(filePath).then(function (view) {
    if (view) {
      if (query.source && query.line) {
        view.forwardSync(query.source, query.line);
      } else if (query.page) {
        view.scrollToPage(query.page);
      } else if (query.nameddest) {
        view.scrollToNamedDest(query.nameddest);
      }
    }
  });
}

function pathnameToFilePath(pathname) {
  var filePath = decodeURI(pathname || '');

  if (process.platform === 'win32') {
    filePath = filePath.replace(/\//g, '\\').replace(/^(.+)\|/, '$1:').replace(/\\([A-Z]:\\)/, '$1');
  } else if (!filePath.startsWith('/')) {
    filePath = '/' + filePath;
  }

  return filePath;
}

// Files with these extensions will be opened as PDFs
var pdfExtensions = new Set();

function updateFileExtensions(extensions) {
  pdfExtensions.clear();
  for (var extension of extensions) {
    extension = extension.toLowerCase().replace(/^\.*/, '.');
    pdfExtensions.add(extension);
  }
}

function openUri(uriToOpen) {
  if (path === null) {
    path = require('path');
  }

  var uriExtension = path.extname(uriToOpen).toLowerCase();
  if (pdfExtensions.has(uriExtension)) {
    if (PdfEditorView === null) {
      PdfEditorView = require('./pdf-editor-view');
    }
    return new PdfEditorView(uriToOpen);
  }
}

function toggleBinaryView() {
  if (PdfEditorView === null) {
    PdfEditorView = require('./pdf-editor-view');
  }
  var paneItem = atom.workspace.getActivePaneItem();
  if (!paneItem || !(paneItem instanceof PdfEditorView)) {
    return;
  }
  paneItem.binaryView = !paneItem.binaryView;
}

function createPdfStatusView() {
  var PdfStatusBarView = require('./pdf-status-bar-view');
  new PdfStatusBarView();
  var PdfGoToPageView = require('./pdf-goto-page-view');
  new PdfGoToPageView();
}

function deserialize(_ref) {
  var filePath = _ref.filePath;
  var scale = _ref.scale;
  var scrollTop = _ref.scrollTop;
  var scrollLeft = _ref.scrollLeft;

  if (require('fs-plus').isFileSync(filePath)) {
    if (PdfEditorView === null) {
      PdfEditorView = require('./pdf-editor-view');
    }
    return new PdfEditorView(filePath, scale, scrollTop, scrollLeft);
  } else {
    console.warn("Could not deserialize PDF editor for path '#{filePath}' because that file no longer exists");
  }
}

if (parseFloat(atom.getVersion()) < 1.7) {
  atom.deserializers.add({
    "name": "PdfEditorDeserializer",
    "deserialize": deserialize
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,