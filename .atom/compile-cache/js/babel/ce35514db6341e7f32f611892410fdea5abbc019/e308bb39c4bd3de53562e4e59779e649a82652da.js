Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reactFactory = reactFactory;
exports.focus = focus;

var openOrShowDock = _asyncToGenerator(function* (URI) {
  // atom.workspace.open(URI) will activate/focus the dock by default
  // dock.toggle() or dock.show() will leave focus wherever it was

  // this function is basically workspace.open, except it
  // will not focus the newly opened pane
  var dock = atom.workspace.paneContainerForURI(URI);
  if (dock) {
    // If the target item already exist, activate it and show dock
    var pane = atom.workspace.paneForURI(URI);
    if (pane) pane.activateItemForURI(URI);
    return dock.show();
  }

  yield atom.workspace.open(URI, {
    searchAllPanes: true,
    activatePane: false
  });
  dock = atom.workspace.paneContainerForURI(URI);
  return dock ? dock.show() : null;
});

exports.openOrShowDock = openOrShowDock;
exports.grammarToLanguage = grammarToLanguage;
exports.msgSpecToNotebookFormat = msgSpecToNotebookFormat;
exports.msgSpecV4toV5 = msgSpecV4toV5;
exports.isMultilanguageGrammar = isMultilanguageGrammar;
exports.kernelSpecProvidesGrammar = kernelSpecProvidesGrammar;
exports.getEmbeddedScope = getEmbeddedScope;
exports.getEditorDirectory = getEditorDirectory;
exports.log = log;
exports.renderDevTools = renderDevTools;
exports.hotReloadPackage = hotReloadPackage;
exports.rowRangeForCodeFoldAtBufferRow = rowRangeForCodeFoldAtBufferRow;
exports.executionTime = executionTime;
exports.js_idx_to_char_idx = js_idx_to_char_idx;
exports.char_idx_to_js_idx = char_idx_to_js_idx;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, "next"); var callThrow = step.bind(null, "throw"); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _atom = require("atom");

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _os = require("os");

var _os2 = _interopRequireDefault(_os);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _config = require("./config");

var _config2 = _interopRequireDefault(_config);

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var INSPECTOR_URI = "atom://hydrogen/inspector";
exports.INSPECTOR_URI = INSPECTOR_URI;
var WATCHES_URI = "atom://hydrogen/watch-sidebar";
exports.WATCHES_URI = WATCHES_URI;
var OUTPUT_AREA_URI = "atom://hydrogen/output-area";
exports.OUTPUT_AREA_URI = OUTPUT_AREA_URI;
var KERNEL_MONITOR_URI = "atom://hydrogen/kernel-monitor";

exports.KERNEL_MONITOR_URI = KERNEL_MONITOR_URI;

function reactFactory(reactElement, domElement, additionalTeardown) {
  var disposer = arguments.length <= 3 || arguments[3] === undefined ? _store2["default"].subscriptions : arguments[3];

  _reactDom2["default"].render(reactElement, domElement);

  var disposable = new _atom.Disposable(function () {
    _reactDom2["default"].unmountComponentAtNode(domElement);
    if (typeof additionalTeardown === "function") additionalTeardown();
  });

  disposer.add(disposable);
}

function focus(item) {
  if (item) {
    var editorPane = atom.workspace.paneForItem(item);
    if (editorPane) editorPane.activate();
  }
}

function grammarToLanguage(grammar) {
  if (!grammar) return null;
  var grammarLanguage = grammar.name.toLowerCase();

  var mappings = _config2["default"].getJson("languageMappings");
  var kernelLanguage = _lodash2["default"].findKey(mappings, function (l) {
    return l.toLowerCase() === grammarLanguage;
  });

  return kernelLanguage ? kernelLanguage.toLowerCase() : grammarLanguage;
}

/**
 * Copied from https://github.com/nteract/nteract/blob/master/src/notebook/epics/execute.js#L37
 * Create an object that adheres to the jupyter notebook specification.
 * http://jupyter-client.readthedocs.io/en/latest/messaging.html
 *
 * @param {Object} msg - Message that has content which can be converted to nbformat
 * @return {Object} formattedMsg  - Message with the associated output type
 */

function msgSpecToNotebookFormat(message) {
  return Object.assign({}, message.content, {
    output_type: message.header.msg_type
  });
}

/**
 * A very basic converter for supporting jupyter messaging protocol v4 replies
 */

function msgSpecV4toV5(message) {
  switch (message.header.msg_type) {
    case "pyout":
      message.header.msg_type = "execute_result";
      break;
    case "pyerr":
      message.header.msg_type = "error";
      break;
    case "stream":
      if (!message.content.text) message.content.text = message.content.data;
      break;
  }
  return message;
}

var markupGrammars = new Set(["source.gfm", "source.asciidoc", "text.restructuredtext", "text.tex.latex.knitr", "text.md", "source.weave.noweb", "source.weave.md", "source.weave.latex", "source.weave.restructuredtext", "source.pweave.noweb", "source.pweave.md", "source.pweave.latex", "source.pweave.restructuredtext", "source.dyndoc.md.stata", "source.dyndoc.latex.stata"]);

function isMultilanguageGrammar(grammar) {
  return markupGrammars.has(grammar.scopeName);
}

var isUnsavedFilePath = function isUnsavedFilePath(filePath) {
  return filePath.match(/Unsaved\sEditor\s\d+/) ? true : false;
};

exports.isUnsavedFilePath = isUnsavedFilePath;

function kernelSpecProvidesGrammar(kernelSpec, grammar) {
  if (!grammar || !grammar.name || !kernelSpec || !kernelSpec.language) {
    return false;
  }
  var grammarLanguage = grammar.name.toLowerCase();
  var kernelLanguage = kernelSpec.language.toLowerCase();
  if (kernelLanguage === grammarLanguage) {
    return true;
  }

  var mappedLanguage = _config2["default"].getJson("languageMappings")[kernelLanguage];
  if (!mappedLanguage) {
    return false;
  }

  return mappedLanguage.toLowerCase() === grammarLanguage;
}

function getEmbeddedScope(editor, position) {
  var scopes = editor.scopeDescriptorForBufferPosition(position).getScopesArray();
  return _lodash2["default"].find(scopes, function (s) {
    return s.indexOf("source.embedded.") === 0;
  });
}

function getEditorDirectory(editor) {
  if (!editor) return _os2["default"].homedir();
  var editorPath = editor.getPath();
  return editorPath ? _path2["default"].dirname(editorPath) : _os2["default"].homedir();
}

function log() {
  if (atom.config.get("Hydrogen.debug")) {
    for (var _len = arguments.length, message = Array(_len), _key = 0; _key < _len; _key++) {
      message[_key] = arguments[_key];
    }

    console.debug.apply(console, ["Hydrogen:"].concat(message));
  }
}

function renderDevTools(enableLogging) {
  if (!atom.devMode) return;
  try {
    var devTools = require("mobx-react-devtools");
    var div = document.createElement("div");
    document.getElementsByTagName("body")[0].appendChild(div);
    devTools.setLogEnabled(enableLogging);
    _reactDom2["default"].render(_react2["default"].createElement(devTools["default"], { noPanel: true }), div);
  } catch (e) {
    log("Could not enable dev tools", e);
  }
}

function hotReloadPackage() {
  var packName = "Hydrogen";
  var packPath = atom.packages.resolvePackagePath(packName);
  if (!packPath) return;
  var packPathPrefix = packPath + _path2["default"].sep;
  var zeromqPathPrefix = _path2["default"].join(packPath, "node_modules", "zeromq") + _path2["default"].sep;

  console.info("deactivating " + packName);
  atom.packages.deactivatePackage(packName);
  atom.packages.unloadPackage(packName);

  // Delete require cache to re-require on activation.
  // But except zeromq native module which is not re-requireable.
  var packageLibsExceptZeromq = function packageLibsExceptZeromq(filePath) {
    return filePath.startsWith(packPathPrefix) && !filePath.startsWith(zeromqPathPrefix);
  };

  Object.keys(require.cache).filter(packageLibsExceptZeromq).forEach(function (filePath) {
    return delete require.cache[filePath];
  });

  atom.packages.loadPackage(packName);
  atom.packages.activatePackage(packName);
  console.info("activated " + packName);
}

function rowRangeForCodeFoldAtBufferRow(editor, row) {
  if (parseFloat(atom.getVersion()) < 1.22) {
    return editor.languageMode.rowRangeForCodeFoldAtBufferRow(row);
  } else {
    // $FlowFixMe
    var range = editor.tokenizedBuffer.getFoldableRangeContainingPoint(new _atom.Point(row, Infinity), editor.getTabLength());

    return range ? [range.start.row, range.end.row] : null;
  }
}

var EmptyMessage = function EmptyMessage() {
  return _react2["default"].createElement(
    "ul",
    { className: "background-message centered" },
    _react2["default"].createElement(
      "li",
      null,
      "No output to display"
    )
  );
};

exports.EmptyMessage = EmptyMessage;
/**
 * Given a message whose type if `execute_reply`, calculates exection time and returns its string representation.
 *
 * @param {Message} message - A Message object whose type is `execute_reply`
 * @return {String} - A string representation of the execution time
 */

function executionTime(message) {
  if (!message.parent_header.date || !message.header.date) {
    return "Not available";
  }
  var start = Date.parse(message.parent_header.date);
  var end = Date.parse(message.header.date);
  var time = end - start; // milliseconds
  var sec = time / 1000; // seconds
  if (sec < 60) {
    return sec.toFixed(3) + " sec";
  }
  var min = (sec - sec % 60) / 60;
  sec = (sec % 60).toFixed(0);
  if (min < 60) {
    return min + " min " + sec + " sec";
  }
  var hour = (min - min % 60) / 60;
  min %= 60;
  return hour + " h " + min + " m " + sec + " s";
}

function js_idx_to_char_idx(js_idx, text) {
  if (text === null) return -1;
  var char_idx = js_idx;
  for (var i = 0; i < text.length && i < js_idx; i++) {
    var char_code = text.charCodeAt(i);
    // check for the first half of a surrogate pair
    if (char_code >= 0xd800 && char_code < 0xdc00) {
      char_idx -= 1;
    }
  }
  return char_idx;
}

function char_idx_to_js_idx(char_idx, text) {
  if (text === null) return -1;
  var js_idx = char_idx;
  for (var i = 0; i < text.length && i < js_idx; i++) {
    var char_code = text.charCodeAt(i);
    // check for the first half of a surrogate pair
    if (char_code >= 0xd800 && char_code < 0xdc00) {
      js_idx += 1;
    }
  }
  return js_idx;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,